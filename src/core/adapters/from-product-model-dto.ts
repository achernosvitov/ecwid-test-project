import type {
	ProductMediaDto,
	ProductModelDto, ProductOptionDto, ProductOptionTypeDto, 
} from '@/core/models/dto/products/model'
import {
	CURRENCY_RUR, type Money, 
} from '@/core/models/money'
import {
	ProductOptionType, type Product, type ProductStock, type ProductMedia, type ProductOption, type ProductThumbnail, type ImagePlaceholderColor, 
} from '@/core/models/products/model'

const PRODUCT_OPTION_TYPE_MAP: Record<ProductOptionTypeDto, ProductOptionType> = {
	'RADIO': ProductOptionType.Radio,
	'SELECT': ProductOptionType.Select,
	'CHECKBOX': ProductOptionType.Checkbox,
	'TEXTFIELD': ProductOptionType.TextField,
	'TEXTAREA': ProductOptionType.TextArea,
	'DATE': ProductOptionType.Date,
	'FILES': ProductOptionType.Files,
	'SIZE': ProductOptionType.Size,
}

function fromStockDto(dto?: ProductModelDto): ProductStock {
	return {
		quantity: dto?.quantity ?? null,
		isUnlimited: Boolean(dto?.unlimited),
		inStock: Boolean(dto?.inStock),
	}
}

function fromMediaDto(media?: ProductMediaDto): ProductMedia {
	return {
		images: media?.images?.map((image) => {
			return {
				id: image.id?.toString() ?? '',
				alt: image.alt?.main,
				isMain: Boolean(image.isMain),
				image160pxUrl: image.image160pxUrl,
				image400pxUrl: image.image400pxUrl,
				image800pxUrl: image.image800pxUrl,
				image1500pxUrl: image.image1500pxUrl,
				imageOriginalUrl: image.imageOriginalUrl,
			}
		}),
	}
}

function fromProductOptionsDto(options?: ProductOptionDto[]): ProductOption[] | undefined {
	return options?.map((option) => {
		return {
			type: option.type ? PRODUCT_OPTION_TYPE_MAP[option.type] : ProductOptionType.Select,
			name: option.name ?? '',
			variants: option.choices?.map((choice, index) => {
				return {
					value: choice.text ?? '',
					isDefault: option.defaultChoice === index,
				}
			}) ?? [],
			required: Boolean(option.required),
		}
	})
}

function fromThumbnailDto(dto?: ProductModelDto): ProductThumbnail {
	return {
		smallThumbnailUrl: dto?.smallThumbnailUrl,
		thumbnailUrl: dto?.thumbnailUrl,
		hdThumnnailUrl: dto?.hdThumbnailUrl,
	}
}

function fromImagePlaceholderDto(dto?: ProductModelDto): ImagePlaceholderColor {
	const {
		red = 255,
		green = 255,
		blue = 255,
		alpha, 
	} = dto?.borderInfo?.dominatingColor ?? {}
	
	return {
		red,
		green,
		blue,
		alpha,
	}
}

function fromPriceDto(dto?: ProductModelDto): Money {
	const base = typeof CURRENCY_RUR.base === 'object' ? CURRENCY_RUR.base[0] : CURRENCY_RUR.base
	const multiplier = base ** CURRENCY_RUR.exponent

	return {
		amount: (dto?.price ?? 0) * multiplier,
		currency: CURRENCY_RUR,
	}
}

export function fromProductModelDto(dto?: ProductModelDto): Product {
	return {
		id: dto?.id?.toString() ?? '',
		sku: dto?.sku ?? '',
		name: dto?.name ?? '',
		slug: dto?.autogeneratedSlug ?? '',
		stock: fromStockDto(dto),
		price: fromPriceDto(dto),
		media: fromMediaDto(dto?.media),
		thumbnail: fromThumbnailDto(dto),
		description: dto?.description,
		seoDescription: dto?.seoDescription,
		options: fromProductOptionsDto(dto?.options),
		placeholder: fromImagePlaceholderDto(dto),
	}
}
